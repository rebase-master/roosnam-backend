---
alwaysApply: true
---

---
rule_type: always
description: Complete long-term project plan, architecture, workflow, and scaffolding for the Roosnam application using SQLite. Enforces two-repo structure (Rails backend + Next.js frontend), best practices, and step-by-step execution. Applied globally in both repositories.
globs: []
---
# Project Master Rule — Full Execution Plan & Workflow (SQLite Edition)

You are an expert full-stack developer building **Roosnam**, a portfolio platform with a **Rails 8.1 backend** (API + Admin + AI integrations) and a **Next.js frontend** (public site with ISR). This `.mdc` file is the **single source of truth** for the entire project lifecycle.

**Strictly follow this plan.**  
- **Two separate repositories**: `roosnam-backend/` and `roosnam-frontend/`
- **No monorepo** unless explicitly approved  
- **All code, suggestions, edits, and plans must align** with this document  
- **Always start tasks with a PLAN** (outline steps, files, rationale)  
- **Never assume or improvise** — reference this rule explicitly

---

## Core Principles

| Principle | Enforcement |
|--------|-------------|
| **Separation of Concerns** | Backend handles data, auth, admin, jobs. Frontend handles UI, static generation, API consumption. |
| **Independent Deployments** | Each repo has its own CI/CD, Docker, and deployment pipeline. |
| **Security by Default** | Secrets in `.env`, CORS restricted in prod, admin behind Devise. |
| **Incremental & Testable** | DB → Models → API → Background Jobs → Frontend → ISR |
| **AI-Agentic Workflow** | Fetch remote content (GitHub, Drive, etc.) via Sidekiq; frontend revalidates. |
| **SQLite for Simplicity** | No external DB server. File-based `db/development.sqlite3`, `db/test.sqlite3`, `db/production.sqlite3`. |

---

## Repository Structure (Must Match Exactly)

### `roosnam-backend/` (Rails 8.1 + SQLite)
```
roosnam-backend/
├── README.md
├── Gemfile
├── Dockerfile
├── config/
│   ├── routes.rb
│   └── initializers/
│       ├── cors.rb
│       └── rails_admin.rb
├── app/
│   ├── controllers/
│   │   └── api/v1/
│   │       └── 
│   ├── models/
│   │   ├──
│   ├── jobs/
│   │   └── fetch_remote_content_job.rb
│   └── views/
├── db/
│   ├── development.sqlite3
│   ├── test.sqlite3
│   └── production.sqlite3
├── lib/tasks/content.rake
├── .env
└── .github/workflows/ci.yml
```

### `roosnam-frontend/` (Next.js)
```
roosnam-frontend/
├── README.md
├── package.json
├── Dockerfile
├── next.config.js
├── tailwind.config.js
├── pages/
│   ├── index.js
│   └── api/
├── lib/
│   └── api.js
├── styles/globals.css
├── .env.local
└── .github/workflows/ci.yml
```

---

## Step-by-Step Execution Plan

> **Run these in order. Use `Plan:` → `Act:` workflow in Cursor.**

---

### Phase 1: Initialize Repositories

#### 1.1 Create `roosnam-backend` with SQLite
```bash
rails new roosnam-backend --skip-javascript
cd roosnam-backend
```

> **SQLite is default** — no need to specify database.

#### 1.2 Create `roosnam-frontend`
```bash
npx create-next-app@latest roosnam-frontend --use-npm --js
cd roosnam-frontend
```

> **Add this `.mdc` file to `.cursor/rules/00-master-plan.mdc` in both repos**

---

### Phase 2: Backend Setup (roosnam-backend)

- Refer to roosnam-backend/.cursor/rules/02-backend-scaffolding.mdc
 file for the detailed scaffolding instructions.

---

### Phase 3: Frontend Setup (roosnam-frontend)

- Refer to roosnam-frontend/.cursor/rules/02-frontend-scaffolding.mdc
 file for the detailed scaffolding instructions.

---

### Phase 4: Local Development (No docker-compose needed)

> Run each app independently:
```bash
# Backend
cd roosnam-backend
bin/rails server

# Frontend
cd roosnam-frontend
npm run dev
```

> SQLite files are auto-created in `db/*.sqlite3`.

---

### Phase 5: CI/CD (GitHub Actions)

#### Rails CI: `.github/workflows/ci.yml`
```yaml
name: Rails CI
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.4
      - run: bundle install
      - run: bin/rails db:create db:migrate RAILS_ENV=test
      - run: bundle exec rspec
```

#### Next.js CI: `.github/workflows/ci.yml`
```yaml
name: Next.js CI
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm ci
      - run: npm run build
      - run: npm run test --if-present
```

---

## Ongoing Workflow in Cursor

1. **Start every task**:
   ```
   Plan: [Your task here]
   ```
   → Cursor responds with steps aligned to this plan.

2. **Review plan** → Reply:
   ```
   Act
   ```

3. **After changes**:
   ```
   Run tests and confirm db/*.sqlite3 is updated
   ```

4. **For new features**:
   - Extend API → Update frontend fetcher → Revalidate

---

## Best Practices (Enforced)

- **Never commit SQLite files** — add to `.gitignore`:
  ```gitignore
  /db/*.sqlite3
  /db/*.sqlite3-journal
  ```
- **CORS**: `origins '*' → yourdomain.com` in prod
- **API Versioning**: Always under `/api/v1`
- **Previews**: Use signed URLs from Rails
- **Monitoring**: Add Sentry later
- **Update this rule** if plan evolves
